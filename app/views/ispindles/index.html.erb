<div class="body-background" style="padding: 10px;">
<br>
<%# raise %>
<% @brew = Brew.find(params[:brew_id]) %>
<% @beer_id = @brew.beer_id %>
<% @beer = Beer.find(@beer_id) %>
<% @beer_fermentation_temp_target = @beer.fermentation_temperature_target.to_f / 100 %>
<% @beer_final_dens = @beer.final_density_target %>
<% @beer_initial_dens = @beer.initial_density_target %>
<%# @collect_date.sort %>
<%# raise %>
<div class="row">

  <div class="col-md-6">
    <section class="profil-panel profils-widget">
    <br>
      <div style="display: flex; justify-content: space-between;">
        <%= image_tag @beer.photo, width: 150, height: 150 %>
        <h5><strong>Ispindle du Brassin : </strong><%= @beer.name %>
      <br><br>
        <p><strong>Collecte Data Ispindle </strong>
        <button type="button" class="btn" data-toggle="modal" data-target="#exampleModal"><i style="color: #282F44;" class="fas fa-cloud-download-alt fa-2x"></i>
        </button></p>

        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div id="search_control">
                  <p><strong>Nom du Ispindle : </strong><input type="text" id="nameIspindle" size="25" style="padding: 5px; border-color: #D3D3D3"></p>
                  <p><strong>Token API : </strong><input type="text" id="token" size="25" style="padding: 5px; border-color: #D3D3D3"></p>
                  <p><strong>Temp Target : </strong><input type="text" id="temp_target" size="25" style="padding: 5px; border-color: #D3D3D3" value='<%= @beer_fermentation_temp_target %>'></p>
                  <p><strong>Dens Target : </strong><input type="text" id="dens_target" size="25" style="padding: 5px; border-color: #D3D3D3" value='<%= @beer_initial_dens %>'></p>
                </div>
                <br>
                <p><button id="clickme" class="btn btn-info btn-lg">
                  <strong>Récupérer les données</strong>
                </button><p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
              </div>
            </div>
          </div>
        </div>




        </h5>
      </div>
    </section>
  </div>
</div>

<div class="row">
  <div class="col-md-6">
    <section class="profil-panel profils-widget">
      <h5><strong style="color: #282F44;">Ispindle :</strong> Temperature</h5> <br>
      <canvas id="myChartTemp" style="background-color: #fff;"></canvas>
      <!-- appears here bitch ! -->
    </section>
  </div>
  <br>
  <br>
  <div class="col-md-6">
    <section class="profil-panel profils-widget">
      <h5><strong style="color: #282F44;">Ispindle :</strong> Density</h5> <br>
      <canvas id="myChartDens" style="background-color: #fff;"></canvas>
      <!-- appears here bitch ! -->
    </section>
  </div>
  <br>

<script>
    const inputSearchTemperature = 'temperature';
    const inputSearchDensity = 'gravity';


    const getMyChartTemp = () => {
            var array_h_temp = [];
            var array_h_temp_target = [];
            var temp_target = <%= @beer_fermentation_temp_target %>;
            // var temp = collect_temp;
            var date = collect_time;

            for (let i=0; i < temp.length; i++){
              array_h_temp.push({x: date[i], y: parseFloat(temp[i])});
              array_h_temp_target.push({x: date[i], y: temp_target });
            };
            console.log(array_h_temp);
            console.log(array_h_temp_target);

            // array_h_temp.sort(function(a, b) {
            //   parseInt(a, 10).x - parseInt(b, 10).x;
            // });

            // console.log(array_h_temp);
            console.log('oki');

            const colors = {
              green: {
                fill: '#e0eadf',
                stroke: '#5eb84d',
              },
              lightBlue: {
                stroke: '#6fccdd',
                fill: '#6fccdd',
              },
              darkBlue: {
                fill: '#92bed2',
                stroke: '#3282bf',
              },
              purple: {
                fill: '#8fa8c8',
                stroke: '#75539e',
              },
            };

            var ctx = document.getElementById("myChartTemp");
            var myChart = new Chart(ctx, {
              type: 'line',
              data: {
                datasets: [
                  {
                    label: 'Temperature constatée',
                    data: array_h_temp,
                    showLine: true,
                    fill: false,
                    borderColor: colors.darkBlue.stroke,
                    backgroundColor: colors.lightBlue.fill
                  },
                  {
                    label: 'Temperature cible',
                    data: array_h_temp_target,
                    showLine: true,
                    fill: false,
                    borderColor: 'red'
                  }
                ]
              },
              options: {
                tooltips: {
                  mode: 'index',
                  intersect: false,
                },
                hover: {
                  mode: 'nearest',
                  intersect: true
                },
                scales: {
                  xAxes: [{
                  type: 'time',
                  time: {
                      parser: 'YYYY-MM-DD HH:mm:ss',
                      unit: 'minute',
                      displayFormats: {
                          'minute': 'YYYY-MM-DD HH:mm:ss',
                          'hour': 'YYYY-MM-DD HH:mm:ss'
                      }
                  },
                }],
                  yAxes: [{
                      ticks: {
                          suggestedMin: 19
                      }
                  }]
                },
              }
            });
    };

    const myChartDensFunc = () => {
      var array_dens = [];
      var array_h_dens = [];
      var array_h_dens_target = [];
      var dens_cible = <%= @beer_initial_dens %>;
      // var dens = collect_dens;
      var date = collect_time;
      // date.replace(/&quot;/g, '"');

      for (let i=0; i < date.length; i++){
        array_h_dens.push({x: date[i], y: dens[i]});
        array_h_dens_target.push({x: date[i], y: dens_cible });
      };
      console.log(array_h_dens);
      console.log(array_h_dens_target);

      var ctx = document.getElementById("myChartDens");
      var myChart = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: [
            {
              label: 'Density constatée',
              data: array_h_dens,
              showLine: true,
              fill: false,
              borderColor: '#3FBF7F'
            },
            {
              label: 'Density cible',
              data: array_h_dens_target,
              showLine: true,
              fill: false,
              borderColor: '#3F3FBF'
            }
          ]
        },
        options: {
          tooltips: {
            mode: 'index',
            intersect: false,
          },
          hover: {
            mode: 'nearest',
            intersect: true
          },
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                  parser: 'YYYY-MM-DD HH:mm:ss',
                  unit: 'minute',
                  displayFormats: {
                      'minute': 'YYYY-MM-DD HH:mm:ss',
                      'hour': 'YYYY-MM-DD HH:mm:ss'
                  }
              },
            }],
            yAxes: [{
                ticks: {
                    suggestedMin: 1013
                }
            }]
          },
        }
      });
    };

    const sendOnSubmitSearch = () => {

      let inputNameApp = document.getElementById('nameIspindle').value;
      let tokenSearch = document.getElementById('token').value;
      let temp_target_input = document.getElementById('temp_target').value;
      let dens_target_input = document.getElementById('dens_target').value;
      let collect_time_t = [];
      let collect_time_d = [];
      let collect_temp = [];
      let collect_dens = [];
      // building request (Temperature)
      let url = `https://things.ubidots.com/api/v1.6/devices/${inputNameApp}/${inputSearchTemperature}/values/?token=${tokenSearch}`;
      fetch(url)
        .then(response => response.json())
        .then((data) => {
          // console.log(data)
          const resultPage = data.next;
          console.log(resultPage);
          const resultsIspindle = data.results;
            // console.log(resultsIspindle)
            for (let i = 0; i < resultsIspindle.length; i++ ) {
              collect_time_t.push(resultsIspindle[i].timestamp);
              collect_temp.push(resultsIspindle[i].value);
            };
        console.log('First Page of Temp');
        console.log(collect_time_t);
        console.log(collect_temp);

        var array_h_temp = [];
        var array_h_temp_target = [];
        var temp_target = temp_target_input;
        var temp = collect_temp;
        var date = collect_time_t;

        for (let i=0; i < temp.length; i++){
          array_h_temp.push({x: date[i], y: parseFloat(temp[i])});
          array_h_temp_target.push({x: date[i], y: temp_target });
        };
        console.log(array_h_temp);
        console.log(array_h_temp_target);

        // array_h_temp.sort(function(a, b) {
        //   parseInt(a, 10).x - parseInt(b, 10).x;
        // });

        // console.log(array_h_temp);
        console.log('oki');

        const colors = {
          green: {
            fill: '#e0eadf',
            stroke: '#5eb84d',
          },
          lightBlue: {
            stroke: '#6fccdd',
            fill: '#6fccdd',
          },
          darkBlue: {
            fill: '#92bed2',
            stroke: '#3282bf',
          },
          purple: {
            fill: '#8fa8c8',
            stroke: '#75539e',
          },
        };

        var ctx = document.getElementById("myChartTemp");
        var myChart = new Chart(ctx, {
          type: 'line',
          data: {
            datasets: [
              {
                label: 'Temperature constatée',
                data: array_h_temp,
                showLine: true,
                fill: false,
                borderColor: colors.darkBlue.stroke,
                backgroundColor: colors.lightBlue.fill
              },
              {
                label: 'Temperature cible',
                data: array_h_temp_target,
                showLine: true,
                fill: false,
                borderColor: 'red'
              }
            ]
          },
          options: {
            tooltips: {
              mode: 'index',
              intersect: false,
            },
            hover: {
              mode: 'nearest',
              intersect: true
            },
            scales: {
              xAxes: [{
              type: 'time',
              time: {
                  parser: 'YYYY-MM-DD HH:mm:ss',
                  unit: 'minute',
                  displayFormats: {
                      'minute': 'YYYY-MM-DD HH:mm:ss',
                      'hour': 'YYYY-MM-DD HH:mm:ss'
                  }
              },
            }],
              yAxes: [{
                  ticks: {
                      suggestedMin: 19
                  }
              }]
            },
          }
        });
      });


      // building request (Density)
      let url2 = `https://things.ubidots.com/api/v1.6/devices/${inputNameApp}/${inputSearchDensity}/values/?token=${tokenSearch}`;
      fetch(url2)
        .then(response => response.json())
        .then((dataD) => {
          // console.log(data)
          const resultPageDens = dataD.next;
          console.log(resultPageDens);
          const resultsIspindle3 = dataD.results;
            // console.log(resultsIspindle)
            for (let i = 0; i < resultsIspindle3.length; i++ ) {
              collect_dens.push(resultsIspindle3[i].value);
              collect_time_d.push(resultsIspindle3[i].timestamp);
            };
          console.log('First Page.. Density');
          console.log(collect_dens);
          console.log(collect_time_d);

          var array_dens = [];
          var array_h_dens = [];
          var array_h_dens_target = [];
          var dens_cible = dens_target_input;
          var dens = collect_dens;
          var date = collect_time_d;
          // date.replace(/&quot;/g, '"');

          for (let i=0; i < date.length; i++){
            array_h_dens.push({x: date[i], y: dens[i]});
            array_h_dens_target.push({x: date[i], y: dens_cible });
          };
          console.log(array_h_dens);
          console.log(array_h_dens_target);

          var ctx = document.getElementById("myChartDens");
          var myChart = new Chart(ctx, {
            type: 'line',
            data: {
              datasets: [
                {
                  label: 'Density constatée',
                  data: array_h_dens,
                  showLine: true,
                  fill: false,
                  borderColor: '#3FBF7F'
                },
                {
                  label: 'Density cible',
                  data: array_h_dens_target,
                  showLine: true,
                  fill: false,
                  borderColor: '#3F3FBF'
                }
              ]
            },
            options: {
              tooltips: {
                mode: 'index',
                intersect: false,
              },
              hover: {
                mode: 'nearest',
                intersect: true
              },
              scales: {
                xAxes: [{
                  type: 'time',
                  time: {
                      parser: 'YYYY-MM-DD HH:mm:ss',
                      unit: 'minute',
                      displayFormats: {
                          'minute': 'YYYY-MM-DD HH:mm:ss',
                          'hour': 'YYYY-MM-DD HH:mm:ss'
                      }
                  },
                }],
                yAxes: [{
                    ticks: {
                        suggestedMin: 1013
                    }
                }]
              },
            }
          });
      });
    // End of Function
    };

if (document.getElementById('clickme') != null){
  document.getElementById('clickme').addEventListener('click', (event) => {
    sendOnSubmitSearch();
  });
};
</script>



<br>
</div>


<div style="background-color: #F0ECEB">
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
</div>
